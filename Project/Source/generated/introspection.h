
/*
 * This file was generated by 'metaprogram.cpp'. It contains information about
 * various datastructures to be able to use introspection
*/

#pragma once
#include "base.h"

enum MetaType
{
    Meta_Unknown = 0,
    Meta_Int,
    Meta_Bool,
    Meta_Float,
    Meta_Vec3,
    Meta_Quat,
    Meta_String,
    Meta_AssetKey,
    Meta_Entity,
    Meta_Camera,
    Meta_Player,
    Meta_PointLight,
};

struct MetaTypeInfo
{
    MetaType metaType;
};

struct MemberDefinition
{
    MetaTypeInfo typeInfo;
    int offset;
    int size;
    String name;
    const char* cName;
    String niceName;
    const char* cNiceName;
    int version;
    bool showEditor;
};

struct MetaStruct
{
    Slice<MemberDefinition> members;
    String name;
    const char* cName;
};

// NOTE: The function needs to have a MetaStruct as the first argument.
// The variadic arguments are just the remaining arguments to feed to the function.
#define Meta_RecursiveCases(functionName, ...) \
    case Meta_AssetKey: functionName(metaAssetKey, __VA_ARGS__); break; \
    case Meta_Entity: functionName(metaEntity, __VA_ARGS__); break; \
    case Meta_Camera: functionName(metaCamera, __VA_ARGS__); break; \
    case Meta_Player: functionName(metaPlayer, __VA_ARGS__); break; \
    case Meta_PointLight: functionName(metaPointLight, __VA_ARGS__); break; \

