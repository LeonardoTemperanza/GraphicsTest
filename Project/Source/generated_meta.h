
#pragma once

/*
 * This file was generated by 'metaprogram.cpp'. It contains information about
 * various datastructures to be able to use introspection
*/

#include "base.h"

enum MetaType
{
    Meta_Unknown = 0,
    Meta_Int,
    Meta_Float,
    Meta_Vec3,
    Meta_Quat,
};

struct MetaTypeInfo
{
    MetaType metaType;
    int numPointers;
    bool isSlice;
    bool isString;
};

struct MemberDefinition
{
    MetaTypeInfo typeInfo;
    int offset;
    String name;
    const char* cName;
};

struct MetaStruct
{
    Slice<MemberDefinition> members;
    String name;
    const char* cName;
};

MemberDefinition _membersOfEntity[] =
{
{ { Meta_Vec3, 0, false, false }, offsetof(Entity, pos), StrLit("pos"), "pos" },
{ { Meta_Quat, 0, false, false }, offsetof(Entity, rot), StrLit("rot"), "rot" },
{ { Meta_Vec3, 0, false, false }, offsetof(Entity, scale), StrLit("scale"), "scale" },
{ { Meta_Unknown, 0, false, false }, offsetof(Entity, flags), StrLit("flags"), "flags" },
{ { Meta_Unknown, 0, false, false }, offsetof(Entity, gen), StrLit("gen"), "gen" },
{ { Meta_Unknown, 0, false, false }, offsetof(Entity, derivedKind), StrLit("derivedKind"), "derivedKind" },
{ { Meta_Unknown, 0, false, false }, offsetof(Entity, derivedId), StrLit("derivedId"), "derivedId" },
{ { Meta_Unknown, 0, false, false }, offsetof(Entity, model), StrLit("model"), "model" },
{ { Meta_Unknown, 0, false, false }, offsetof(Entity, mount), StrLit("mount"), "mount" },
{ { Meta_Unknown, 0, false, false }, offsetof(Entity, mountBone), StrLit("mountBone"), "mountBone" },
};

MetaStruct metaEntity =
{ {.ptr=_membersOfEntity, .len=ArrayCount(_membersOfEntity)}, StrLit("Entity"), "Entity" };

MemberDefinition _membersOfCamera[] =
{
{ { Meta_Unknown, 0, false, false }, offsetof(Camera, base), StrLit("base"), "base" },
{ { Meta_Unknown, 0, false, false }, offsetof(Camera, params), StrLit("params"), "params" },
};

MetaStruct metaCamera =
{ {.ptr=_membersOfCamera, .len=ArrayCount(_membersOfCamera)}, StrLit("Camera"), "Camera" };

MemberDefinition _membersOfPlayer[] =
{
{ { Meta_Unknown, 0, false, false }, offsetof(Player, base), StrLit("base"), "base" },
{ { Meta_Vec3, 0, false, false }, offsetof(Player, speed), StrLit("speed"), "speed" },
{ { Meta_Unknown, 0, false, false }, offsetof(Player, grounded), StrLit("grounded"), "grounded" },
};

MetaStruct metaPlayer =
{ {.ptr=_membersOfPlayer, .len=ArrayCount(_membersOfPlayer)}, StrLit("Player"), "Player" };

MemberDefinition _membersOfPointLight[] =
{
{ { Meta_Unknown, 0, false, false }, offsetof(PointLight, base), StrLit("base"), "base" },
{ { Meta_Float, 0, false, false }, offsetof(PointLight, intensity), StrLit("intensity"), "intensity" },
{ { Meta_Vec3, 0, false, false }, offsetof(PointLight, offset), StrLit("offset"), "offset" },
};

MetaStruct metaPointLight =
{ {.ptr=_membersOfPointLight, .len=ArrayCount(_membersOfPointLight)}, StrLit("PointLight"), "PointLight" };

template<typename t>
MetaStruct GetMetaStruct()
{
    if constexpr (std::is_same_v<Entity, t>)
    {
        return metaEntity;
    }
    else if constexpr (std::is_same_v<Camera, t>)
    {
        return metaCamera;
    }
    else if constexpr (std::is_same_v<Player, t>)
    {
        return metaPlayer;
    }
    else if constexpr (std::is_same_v<PointLight, t>)
    {
        return metaPointLight;
    }
    else
        static_assert(false, "Given type is not being introspected (add introspect keyword)");
};
